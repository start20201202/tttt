привіт, хлопці, як ви називаєтесь, мене звати 
 
в сьогоднішньому відео ми будемо 
 
створювати односторінкову програму 
 {{ 1}} з використанням ванільного javascript добре, тому не потрібні 
 
фреймворки, щоб 
 
досягти цього 
 
ми будемо виконувати всі 
 
клієнтські маршрутизації самі 
 
добре, так що лише для тих з вас, хто не є 
 {{ 1}} надто впевнені, що наші односторінкові програми 
 
 - це в основному лише 
 
веб-сторінки чи програми в Інтернеті 
 
, які мати один файл html, а потім 
 
весь вміст і компоненти 
 
, перегляди та 
 
подібні речі 
 
всі вони динамічно завантажуються за допомогою 
 
javascript 
 
через запити ajax або отримання до 
 
на стороні сервера 
 
для отримання даних та подібних речей, тому 
 
по суті він повинен 
 
працювати як рідна програма, тому 
 
, що включає 
 
, що дуже важливо, жодна сторінка не оновлюється 
 
та інші речі t природа зараз гаразд, я 
 
хочу також сказати вам, що 
 
сьогоднішнє відео буде розділено на 
 
два окремі частини 
 
ми швидко повернемось до цього 
 
дуже швидко 
 
, але давайте просто зараз і погляньте 
 
на готовий продукт, добре 
 
, так що 
 
ось саме додаток, так що { {1}} 
як ми можемо бачити 
 
дуже просту програму зараз, якби я мав 
 
перейти до розділу публікацій {{1} } 
ми бачимо прямо тут, що цей 
 
правий бік тут 
 
 - це вигляд, який змінюється нормально, так що {{1} } 
у нас є інформаційна панель 
 
у нас є перегляд публікацій, і ми можемо бачити 
 
тут, звичайно, у нас є клієнтська сторона {{ 1}} 
маршрутизація 
 
для косих слэш-повідомлень, потім, звичайно, 
 
коріння, а потім 
 
налаштування тепер ми можемо навіть зайти сюди 
 
і 
 
натиснути на публікацію, і ми бачимо, що ми 
 
насправді отримуємо 
 
Параметри URL-адреси на стороні клієнта, так що 
 
тут отримуємо косу риску вперед 2 fhtml-файлу 
 
, тому дуже скоро ми 
 
напишемо 
 
фактичний веб-сервер за допомогою express { {1}} 
, а кожен окремий маршрут 
 
 
 
повернеться до єдиного індексу HTML-файлу {{1} } 
що, звичайно, допомагає {1}} 
односторінковій сутності цього 
 
проекту, так що всередині ми можемо 
 { {1}} включіть шаблон html 
 
добре, і ми можемо просто сказати для 
 
заголовка 
 
однієї сторінки додаток гаразд 
 
ми також можемо включити трохи javascript, так що 
 
спустимось сюди, ми скажемо 
 
сценарій із джерелом 
 
це буде мати тип модуля 
 
, оскільки ми будемо приймати 
 {{1} } перевага 
 
синтаксису експорту імпорту es6 
 
насамперед завдяки тому, що кожен 
 
наш окремий перегляд тут тож дописи та налаштування інформаційної панелі 
 
, до яких вони всі збираються 
 
, мають власний клас javascript 
 
, тому саме тому ми використовуватиму 
 
синтаксис вводу es6 вводу 
 
з модулями добре, так що для 
 
джерела 
 
це збирається переносити скісну риску 
 
статичну, і тоді ми можемо просто сказати js 
 
прямо тут, і ми можемо викликати цей 
 {{ 1}} індекс.js, отже, саме цей тут - це наш 
 
інтерфейс 
 
або наш запис у форматі javascript на стороні клієнта 
 
точка {{ 1}} 
гаразд, отже, тепер ми можемо написати кілька основних 
 
навігаційних систем, так що 
 
давайте підійдемо сюди, і я просто йду до { {1}} 
скопіюйте та вставте справді простий html 
 
, тому 
 
я скопіюю це звідси та вставлю {{1 }} 
всередині тут, так що 
 
як ми можемо бачити тут досить 
 
прямий html 
 
просто навігація з класом навігації та кількома 
 
посиланнями 
 
всередині, як ми бачимо, я маю 
 {{1} } окремі заняття за власне посиланнями 
 
, але 
 
що ще важливіше, я маю hrefs 
 
саме тут кожен із наших 
 
окремих маршрутів, щоб ми могли бачити тут 
 
курси вперед косих рисок 
 
налаштувань косої риски вперед зараз також важливо 
 
те, що 
 
ми маємо тут тут атрибут data dash link link 
 
 {{1} }} 
, тому я забув згадати раніше, але це 
 
буде зроблено 
 {{ 1}} використовуючи api історії так, по суті, 
 
будь-який із цих прив’язкових тегів з атрибутом 
 
даних 
 
посилання має використовувати історію api 
 
метод push-станів для 
 
переходу до цього конкретного ресурсу, щоб 
 
уникати сторінки 
 
оновити, але ми повернемося 
 
до цього самого дня